using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;
using Microsoft.EntityFrameworkCore;
using ZeegZag.Crawler2.Entity;
using ZeegZag.Crawler2.Services.Database;

namespace ZeegZag.Crawler2.Services.Bittrex
{
    /// <summary>
    /// Bittrex exchange service
    /// </summary>
    public class BittrexService : ExchangeServiceBase
    {        
        private const string CurrencyUrl = "https://bittrex.com/api/v1.1/public/getcurrencies"; //TODO: needs 2.0 url
        private const string MarketUrl = "https://bittrex.com/api/v2.0/pub/markets/GetMarketSummaries";
        private const string MinutePriceUrl = "https://bittrex.com/Api/v2.0/pub/market/GetLatestTick?marketName={0}-{1}&tickInterval=oneMin";
        private const string DailyPriceUrl = "https://bittrex.com/Api/v2.0/pub/market/GetLatestTick?marketName={0}-{1}&tickInterval=day";
        
        /// <inheritdoc />
        public override string Name { get; } = "Bittrex";

        /// <inheritdoc />
        public override void Init(zeegzagContext db)
        {
            GetExchangeId(db);
            RegisterRateLimit(20);
            AlignSockets(10);
            
            CreatePuller(PULLER_CURRENCY, 60 * 60, 0, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, 45, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, 90, OnPullingPrices); //pull prices every minute
        }

        private async Task OnPullingPrices()
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();
                int i = 0;

                var tasks = new List<Task>(prices.Count);
                foreach (var bc in prices)
                {
                    tasks.Add(Task.Factory.StartNew(() =>
                    {
                        //request last minute and daily ticker
                        var responseMinute =
                            Pull<BittrexResponse<BittrexTicker>>(string.Format(MinutePriceUrl, bc.From, bc.To)).Result;
                        //var responseDaily = Pull<BittrexResponse<BittrexTicker>>(string.Format(DailyPriceUrl, bc.From, bc.To)).Result;
                        
                        if (responseMinute.success && responseMinute.result.Count > 0)
                        {
                            var data = responseMinute.result[0];
                            //var dataDaily = responseDaily.result[0];
                            if (data != null /*&& dataDaily != null*/)
                            {
                                DatabaseService.Enqueue(
                                    new PriceUpdaterJob(bc.Id, data.C, data.V, 1, 0, 0)
                                        .UpdatePriceData(data.O, data.H, data.L, data.C));
                                        //.UpdatePrice24Data(dataDaily.O, dataDaily.H, dataDaily.L, dataDaily.C));
                                DatabaseService.Enqueue(new UsdGeneratorJob(ExchangeId, bc.FromId, bc.ToId, bc.Price));
                            }
                        }
                        else
                        {
                            Console.WriteLine(string.Format("Could not pull {0}-{1} from {2}: {3}",
                                bc.To, bc.From, Name, responseMinute.message));
                        }
                    }));
                }
                Task.WaitAll(tasks.ToArray());
            }
        }

        private async Task OnPullingMarkets()
        {
            var response = Pull<BittrexResponse<BittrexMarketSummary>>(MarketUrl).Result;
            if (response.success)
            {
                using (var db = DatabaseService.CreateContext())
                {
                    //get all prices from db
                    var prices = db.BorsaCurrencyT
                        .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                        .Where(bc => bc.BorsaId == ExchangeId)
                        .ToList();

                    foreach (var ms in response.result)
                    {
                        var from = ms.Market.BaseCurrency;
                        var to = ms.Market.MarketCurrency;

                        new MarketUpdaterJob(ExchangeId, from, to, ms.Market.IsActive, prices).Execute(db);
                    }

                    new MarketUpdaterJob(prices).Execute(db);

                    db.SaveChanges();
                }
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name, response.message));
            }
        }

        private async Task OnPullingCurrencies()
        {
            var response = Pull<BittrexResponse<BittrexCurrency>>(CurrencyUrl).Result;
            if (response.success)
            {
                foreach (var currency in response.result.Where(r => r.IsActive))
                    DatabaseService.Enqueue(new CurrencyUpdaterJob(
                        ExchangeId,
                        currency.Currency,
                        currency.CurrencyLong,
                        currency.IsActive,                        
                        currency.TxFee));
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name, response.message));
            }
        }
    }
}
