using System;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;
using Microsoft.EntityFrameworkCore;
using ZeegZag.Crawler2.Entity;
using ZeegZag.Crawler2.Services.Database;

namespace ZeegZag.Crawler2.Services.Bittrex
{
    /// <summary>
    /// Bittrex exchange service
    /// </summary>
    public class BittrexService : ExchangeServiceBase
    {        
        private const string CurrencyUrl = "https://bittrex.com/api/v1.1/public/getcurrencies"; //TODO: needs 2.0 url
        private const string MarketUrl = "https://bittrex.com/api/v2.0/pub/markets/GetMarketSummaries";
        private const string MinutePriceUrl = "https://bittrex.com/Api/v2.0/pub/market/GetLatestTick?marketName={0}-{1}&tickInterval=oneMin";
        private const string DailyPriceUrl = "https://bittrex.com/Api/v2.0/pub/market/GetLatestTick?marketName={0}-{1}&tickInterval=day";
        
        /// <inheritdoc />
        public override string Name { get; } = "Bittrex";

        /// <inheritdoc />
        public override void Init(zeegzagContext db)
        {
            GetExchangeId(db);
            
            CreatePuller(PULLER_CURRENCY, 60 * 60 * 6, true, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, true, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, false, OnPullingPrices); //pull prices every minute
        }

        private async Task OnPullingPrices()
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        From = bc.FromCurrency.ShortName,
                        To = bc.ToCurrency.ShortName
                    }).ToList();
                int i = 0;
                
                Parallel.ForEach(prices, bc =>
                {

                    //request last minute and daily ticker
                    var responseMinuteTask =
                        Pull<BittrexResponse<BittrexTicker>>(string.Format(MinutePriceUrl, bc.From, bc.To));
                    var responseDailyTask = Pull<BittrexResponse<BittrexTicker>>(string.Format(DailyPriceUrl, bc.From, bc.To));
                    Task.WaitAll(responseDailyTask, responseMinuteTask);

                    var responseMinute = responseMinuteTask.Result;
                    var responseDaily = responseDailyTask.Result;
                    if (responseMinute.success && responseMinute.result.Count > 0)
                    {
                        var data = responseMinute.result[0];
                        var dataDaily = responseDaily.result[0];
                        DatabaseService.Enqueue(
                            new PriceUpdaterJob(bc.Id, data.C, data.V, 1, dataDaily.V, dataDaily.BV));
                    }
                    else
                    {
                        Console.WriteLine(string.Format("Could not pull {0}-{1} from {2}: {3}",
                            bc.To, bc.From, Name, responseMinute.message));
                    }
                });
            }
        }

        private async Task OnPullingMarkets()
        {
            var response = await Pull<BittrexResponse<BittrexMarketSummary>>(MarketUrl);
            if (response.success)
            {
                using (var db = DatabaseService.CreateContext())
                {
                    //get all prices from db
                    var prices = db.BorsaCurrencyT
                        .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                        .Where(bc => bc.BorsaId == ExchangeId)
                        .ToList();

                    foreach (var ms in response.result)
                    {
                        var from = ms.Market.BaseCurrency;
                        var to = ms.Market.MarketCurrency;

                        new MarketUpdaterJob(ExchangeId, from, to, ms.Market.IsActive, prices).Execute(db);
                    }

                    new MarketUpdaterJob(prices).Execute(db);

                    db.SaveChanges();
                }
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name, response.message));
            }
        }

        private async Task OnPullingCurrencies()
        {
            var response = await Pull<BittrexResponse<BittrexCurrency>>(CurrencyUrl);
            if (response.success)
            {
                foreach (var currency in response.result.Where(r => r.IsActive))
                    DatabaseService.Enqueue(new CurrencyUpdaterJob(
                        ExchangeId,
                        currency.Currency,
                        currency.CurrencyLong,
                        currency.IsActive,                        
                        currency.TxFee));
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name, response.message));
            }
        }
    }
}
