using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;
using ZeegZag.Crawler2.Services.Bittrex;
using ZeegZag.Crawler2.Services.Database;
using ZeegZag.Data.Entity;

namespace ZeegZag.Crawler2.Services.Poloniex
{
    /// <summary>
    /// Poloniex exchange service
    /// </summary>
    public class PoloniexService : ExchangeServiceBase
    {
        private const string CurrencyUrl = "https://poloniex.com/public?command=returnCurrencies";
        private const string MarketPriceUrl = "https://poloniex.com/public?command=returnTicker";
        private const string FiveMinVolumeUrl = "https://poloniex.com/public?command=returnChartData&currencyPair={0}_{1}&start={2}&end=9999999999&period=300";
        private const string OrderUrl = "https://poloniex.com/public?command=returnOrderBook&currencyPair={0}_{1}&depth=10";
        private const string HealthUrl = "https://poloniex.com/public?command=returnCurrencies";

        /// <inheritdoc />
        public override string Name { get; } = "Poloniex";

        /// <inheritdoc />
        public override void Init(admin_zeegzagContext db)
        {
            GetExchangeId(db);
            RegisterRateLimit(6);

            CreatePuller(PULLER_CURRENCY, 60 * 60, 0, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, 45, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, 90, OnPullingPrices); //pull prices every minute
            //CreatePuller(PULLER_VOLUME, 60, 90, OnPullingVolume); //pull volumes every minute
            CreatePuller(PULLER_ORDER, 60, 90, OnPullingOrders); //pull orders every minute
        }

        private async Task OnPullingPrices(PullerSession session)
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();


                var response = Pull<JObject>(MarketPriceUrl, session);
                var healths = Pull<JObject>(HealthUrl, session);
                foreach (var obj in response.Children<JProperty>())
                {
                    var from_to = obj.Name.Split("_");
                    var from = from_to[0];
                    var to = from_to[1];
                    var ticker = obj.Value.ToObject<PoloniexTicker>();
                    var borsaCurrency = prices.FirstOrDefault(bc => bc.From == from && bc.To == to);
                    if (borsaCurrency != null)
                    {
                        var health = healths?.Children<JProperty>().FirstOrDefault(h => h.Name == borsaCurrency.To)?.Value.ToObject<PoloniexHealth>();

                        var job = new PriceUpdaterJob(borsaCurrency.Id, Convert.ToDecimal(ticker.last), 0,
                                1, Convert.ToDecimal(ticker.baseVolume), Convert.ToDecimal(ticker.quoteVolume))
                            .UpdatePrice24Data(0, Convert.ToDecimal(ticker.high24hr), Convert.ToDecimal(ticker.low24hr), 0);

                        if (health != null)
                            job.UpdateHealth(health.frozen == 0 && health.disabled == 0, health.frozen == 0 && health.disabled == 0);
                        DatabaseService.Enqueue(job);
                        DatabaseService.Enqueue(new UsdGeneratorJob(ExchangeId, borsaCurrency.FromId, borsaCurrency.ToId, borsaCurrency.Price));
                    }
                }
            }
        }
        private async Task OnPullingOrders(PullerSession session)
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();

                
                ParallelFor(prices, bc =>
                {
                    var responseOrders = Pull<PoloniexOrders>(string.Format(OrderUrl, bc.From, bc.To), session);
                    DatabaseService.Enqueue(new OrderUpdaterJob(bc.Id)
                        .UpdateBuy(responseOrders.bids, c => Convert.ToDecimal(c[0]), c => Convert.ToDecimal(c[1]))
                        .UpdateSell(responseOrders.asks, c => Convert.ToDecimal(c[0]), c => Convert.ToDecimal(c[1])));
                }).Wait();
            }
        }

        private async Task OnPullingMarkets(PullerSession session)
        {
            var response = Pull<JObject>(MarketPriceUrl, session);

            using (var db = DatabaseService.CreateContext())
            {

                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                    .Where(bc => bc.BorsaId == ExchangeId)
                    .ToList();

                foreach (var obj in response.Children<JProperty>())
                {
                    var from_to = obj.Name.Split("_");
                    var from = from_to[0];
                    var to = from_to[1];

                    new MarketUpdaterJob(ExchangeId, from, to, true, prices).Execute(db);
                }

                new MarketUpdaterJob(prices).Execute(db);

                db.SaveChanges();
            }
        }

        private async Task OnPullingCurrencies(PullerSession session)
        {
            var response = Pull<JObject>(CurrencyUrl, session);
            foreach (var obj in response.Children<JProperty>())
            {
                var currencyName = obj.Name;
                var currency = obj.Value.ToObject<PoloniexCurrency>();
                DatabaseService.Enqueue(new CurrencyUpdaterJob(
                    ExchangeId,
                    currencyName,
                    currency.name,
                    currency.disabled == 0,
                    Convert.ToDecimal(currency.txFee)));
            }
        }
    }
}
