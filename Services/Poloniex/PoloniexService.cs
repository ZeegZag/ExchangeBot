using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;
using ZeegZag.Crawler2.Entity;
using ZeegZag.Crawler2.Services.Bittrex;
using ZeegZag.Crawler2.Services.Database;

namespace ZeegZag.Crawler2.Services.Poloniex
{
    /// <summary>
    /// Poloniex exchange service
    /// </summary>
    public class PoloniexService : ExchangeServiceBase
    {
        private const string CurrencyUrl = "https://poloniex.com/public?command=returnCurrencies";
        private const string MarketPriceUrl = "https://poloniex.com/public?command=returnTicker";
        private const string FiveMinVolumeUrl = "https://poloniex.com/public?command=returnChartData&currencyPair={0}_{1}&start={2}&end=9999999999&period=300";

        /// <inheritdoc />
        public override string Name { get; } = "Poloniex";

        /// <inheritdoc />
        public override void Init(zeegzagContext db)
        {
            GetExchangeId(db);

            CreatePuller(PULLER_CURRENCY, 60 * 60 * 6, true, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, true, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, false, OnPullingPrices); //pull prices every minute
            CreatePuller(PULLER_VOLUME, 60, false, OnPullingVolume); //pull volumes every minute
        }

        private async Task OnPullingPrices()
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        From = bc.FromCurrency.ShortName,
                        To = bc.ToCurrency.ShortName
                    }).ToList();


                var response = await Pull<JObject>(MarketPriceUrl);
                foreach (var obj in response.Children<JProperty>())
                {
                    var from_to = obj.Name.Split("_");
                    var from = from_to[0];
                    var to = from_to[1];
                    var ticker = obj.Value.ToObject<PoloniexTicker>();
                    var borsaCurrency = prices.FirstOrDefault(bc => bc.From == from && bc.To == to);
                    if (borsaCurrency != null)
                        DatabaseService.Enqueue(new PriceUpdaterJob(borsaCurrency.Id, Convert.ToDecimal(ticker.last), 0, 1, Convert.ToDecimal(ticker.baseVolume), Convert.ToDecimal(ticker.quoteVolume)));
                }
            }
        }
        private async Task OnPullingVolume()
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        From = bc.FromCurrency.ShortName,
                        To = bc.ToCurrency.ShortName
                    }).ToList();
                int i = 0;

                Parallel.ForEach(prices, bc =>
                {

                    //request last minute and daily ticker
                    var response =
                        Pull<List<PoloniexChartData>>(string.Format(FiveMinVolumeUrl, bc.From, bc.To,
                            DateTimeToTimestamp(DateTime.Now.AddMinutes(-5)))).Result;
                    if (response.Count > 0)
                    {

                        var data = response[0];
                        DatabaseService.Enqueue(
                            new PriceUpdaterJob(bc.Id).UpdateVolume(data.volume, 5));
                    }
                    else
                    {
                        Console.WriteLine(string.Format("Could not pull {0}-{1} volume from {2}: List was empty",
                            bc.To, bc.From, Name));
                    }
                });
            }
            
        }

        private async Task OnPullingMarkets()
        {
            var response = await Pull<JObject>(MarketPriceUrl);

            using (var db = DatabaseService.CreateContext())
            {

                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                    .Where(bc => bc.BorsaId == ExchangeId)
                    .ToList();

                foreach (var obj in response.Children<JProperty>())
                {
                    var from_to = obj.Name.Split("_");
                    var from = from_to[0];
                    var to = from_to[1];

                    new MarketUpdaterJob(ExchangeId, from, to, true, prices).Execute(db);
                }

                new MarketUpdaterJob(prices).Execute(db);

                db.SaveChanges();
            }
        }

        private async Task OnPullingCurrencies()
        {
            var response = await Pull<JObject>(CurrencyUrl);
            foreach (var obj in response.Children<JProperty>())
            {
                var currencyName = obj.Name;
                var currency = obj.Value.ToObject<PoloniexCurrency>();
                DatabaseService.Enqueue(new CurrencyUpdaterJob(
                    ExchangeId,
                    currencyName,
                    currency.name,
                    currency.disabled == 0,
                    Convert.ToDecimal(currency.txFee)));
            }
        }
    }
}
