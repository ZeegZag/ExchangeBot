using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ZeegZag.Crawler2.Services.Binance;
using ZeegZag.Crawler2.Services.Database;
using ZeegZag.Data.Entity;

namespace ZeegZag.Crawler2.Services.Cexio
{
    public class CexioService : ExchangeServiceBase
    {
        private const string CurrencyUrl = "https://cex.io/api/currency_limits";
        private const string PriceUrl = "https://cex.io/api/tickers/USD/EUR/RUB/BTC/GBP/ETH";
        private const string OrderUrl = "https://cex.io/api/order_book/{0}/{1}/?depth=10";

        public override string Name { get; } = "Cexio";

        /// <inheritdoc />
        public override void Init(admin_zeegzagContext db)
        {
            GetExchangeId(db);
            RegisterRateLimit(10);

            CreatePuller(PULLER_CURRENCY, 60 * 60, 0, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, 45, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, 90, OnPullingPrices); //pull prices every minute
            CreatePuller(PULLER_ORDER, 60, 90, OnPullingOrders); //pull prices every minute
        }

        private async Task OnPullingPrices(PullerSession session)
        {
            var response = Pull<CexioResponse<List<CexioPrice>>>(PriceUrl, session);

            if (response.ok == "ok")
            {
                using (var db = DatabaseService.CreateContext())
                {
                    //get all prices from db
                    var prices = db.BorsaCurrencyT
                        .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                        .Select(bc => new
                        {
                            Id = bc.Id,
                            FromId = bc.FromCurrencyId,
                            From = bc.FromCurrencyName,
                            ToId = bc.ToCurrencyId,
                            To = bc.ToCurrencyName,
                            Price = bc.Price,
                        }).ToList();

                    //get markets
                    foreach (var bc in prices)
                    {
                        var key = bc.To+ ":" + bc.From;
                        var market = response.data.FirstOrDefault(d => d.pair == key);
                        if (market != null)
                        {
                            DatabaseService.Enqueue(
                                new PriceUpdaterJob(bc.Id, Convert.ToDecimal(market.last))
                                .UpdateVolume24(Convert.ToDecimal(market.volume), 0)
                                .UpdatePriceData(0, Convert.ToDecimal(market.high), Convert.ToDecimal(market.low), 0));
                            DatabaseService.Enqueue(new UsdGeneratorJob(ExchangeId, bc.FromId, bc.ToId, bc.Price));
                        }                        
                    }
                }
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name,
                    JsonConvert.SerializeObject(response)));
            }
        }
        private async Task OnPullingOrders(PullerSession session)
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();


                ParallelFor(prices, bc =>
                {
                    var responseOrders = Pull<CexioOrders>(string.Format(OrderUrl, bc.To, bc.From), session);
                    DatabaseService.Enqueue(new OrderUpdaterJob(bc.Id)
                        .UpdateBuy(responseOrders.bids, c => c[0], c => c[1])
                        .UpdateSell(responseOrders.asks, c => c[0], c => c[1]));
                }).Wait();
            }
        }

        private async Task OnPullingMarkets(PullerSession session)
        {
            var response = Pull<CexioResponse<CexioMarketResult>>(CurrencyUrl, session);

            if (response.ok == "ok")
            {
                using (var db = DatabaseService.CreateContext())
                {
                    //get all prices from db
                    var prices = db.BorsaCurrencyT
                        .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                        .Where(bc => bc.BorsaId == ExchangeId)
                        .ToList();

                    //get markets
                    foreach (var market in response.data.pairs)
                    {
                        var from = market.symbol2;
                        var to = market.symbol1;

                        new MarketUpdaterJob(ExchangeId, from, to, true, prices).Execute(db);
                    }
                    new MarketUpdaterJob(prices).Execute(db);

                    db.SaveChanges();
                }
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name,
                    JsonConvert.SerializeObject(response)));
            }
        }

        private async Task OnPullingCurrencies(PullerSession session)
        {
            var response = Pull<CexioResponse<CexioMarketResult>>(CurrencyUrl, session);

            if (response.ok == "ok")
            {
                var coinNames = response.data.pairs.SelectMany(p =>
                    {
                        var from = p.symbol2;
                        var to = p.symbol1;
                        return new List<string>() { from, to };
                    })
                    .Distinct()
                    .ToList();
                foreach (var currency in coinNames)
                    DatabaseService.Enqueue(new CurrencyUpdaterJob(
                        ExchangeId,
                        currency,
                        currency,
                        true,
                        null));
            }
            else
            {
                Console.WriteLine(string.Format("Could not pull currencies from {0}: {1}", Name, JsonConvert.SerializeObject(response)));
            }
        }
    }
}
