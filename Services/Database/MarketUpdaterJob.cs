using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ZeegZag.Crawler2.Entity;

namespace ZeegZag.Crawler2.Services.Database
{
    /// <summary>
    /// This job is not intended to be enqueued to the database service, so we do not inherit it from IDatabaseJob. It will be called in a for loop and executed in a single turn synchronously
    /// </summary>
    public class MarketUpdaterJob
    {
        private readonly int _exchangeId;
        private readonly string _from;
        private readonly string _to;
        private readonly bool _isActive;
        private readonly List<BorsaCurrencyT> _prices;
        private bool disableMode;

        /// <summary>
        /// Adds or updates market entities and removes them from the list
        /// </summary>
        /// <param name="exchangeId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="isActive"></param>
        /// <param name="prices"></param>
        public MarketUpdaterJob(
            int exchangeId,
            string from,
            string to,
            bool isActive,
            List<BorsaCurrencyT> prices)
        {
            _exchangeId = exchangeId;
            _from = @from;
            _to = to;
            _isActive = isActive;
            _prices = prices;
        }

        /// <summary>
        /// This constructor disables all entities in this list (which contains remaining entities from database which does not exist on api result)
        /// </summary>
        /// <param name="prices"></param>
        public MarketUpdaterJob(
            List<BorsaCurrencyT> prices)
        {
            _prices = prices;
            disableMode = true;
        }

        public void Execute(zeegzagContext db)
        {
            if (disableMode)
            {
                //disabling all remaining entities
                foreach (var bc in _prices.Where(p => p.AutoGenerated != true))
                {
                    bc.Disabled = true;
                }
            }
            else
            {
                //adding or updating entities
                var borsaCurrency = _prices.FirstOrDefault(bc =>
                    bc.FromCurrency.ShortName == _from && bc.ToCurrency.ShortName == _to);
                if (borsaCurrency == null)
                {
                    if (_isActive)
                    {
                        var fromCur = db.CurrencyT.FirstOrDefault(c => c.ShortName == _from);
                        var toCur = db.CurrencyT.FirstOrDefault(c => c.ShortName == _to);
                        if (fromCur != null && toCur != null)
                        {
                            //add new
                            borsaCurrency = db.BorsaCurrencyT.Add(new BorsaCurrencyT
                            {
                                FromCurrencyId = fromCur.Id,
                                ToCurrencyId = toCur.Id,
                                BorsaId = _exchangeId,
                                Price = 0
                            }).Entity;
                        }
                    }
                }
                else
                {
                    borsaCurrency.Disabled = !_isActive;
                    borsaCurrency.AutoGenerated = false;
                }
                _prices.Remove(borsaCurrency);
            }
        }
    }
}
