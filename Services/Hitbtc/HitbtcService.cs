using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using ZeegZag.Crawler2.Services.Database;
using ZeegZag.Data.Entity;

namespace ZeegZag.Crawler2.Services.Hitbtc
{
    public class HitbtcService : ExchangeServiceBase
    {
        private const string MarketUrl = "https://api.hitbtc.com/api/2/public/symbol";
        private const string PriceUrl = "https://api.hitbtc.com/api/2/public/ticker";
        private const string VolumeUrl = "https://api.hitbtc.com/api/2/public/candles/{0}?limit=1&period=M1";
        private const string OrderUrl = "https://api.hitbtc.com/api/2/public/orderbook/{0}?limit=10";
        private const string HealthUrl = "https://api.hitbtc.com/api/2/public/currency";

        public override string Name { get; } = "Hitbtc";

        /// <inheritdoc />
        public override void Init(admin_zeegzagContext db)
        {
            GetExchangeId(db);
            RegisterRateLimit(20);

            CreatePuller(PULLER_CURRENCY, 60 * 60, 0, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, 45, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, 90, OnPullingPrices); //pull prices every minute
            CreatePuller(PULLER_ORDER, 60, 90, OnPullingOrders); //pull prices every minute
        }

        private async Task OnPullingPrices(PullerSession session)
        {
            var response = Pull<List<HitbtcTicker>>(PriceUrl, session);

            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();

                var healths = Pull<List<HitbtcHealth>>(HealthUrl, session);
                ParallelFor(prices, bc =>
                {
                    var health = healths?.FirstOrDefault(h => h.id == bc.To);
                    var key = bc.To + bc.From;
                    var market = response.FirstOrDefault(d => d.symbol == key);
                    if (market != null)
                    {
                        var job = new PriceUpdaterJob(bc.Id, Convert.ToDecimal(market.last))
                            .UpdateVolume24(Convert.ToDecimal(market.volume),
                                Convert.ToDecimal(market.volumeQuote));

                        if (health != null)
                            job.UpdateHealth(health.transferEnabled && health.payinEnabled, health.transferEnabled && health.payoutEnabled);

                        //var responseVolume = Pull<List<HitbtcCandle>>(string.Format(VolumeUrl, key)).Result;
                        //if (responseVolume.Count > 0)
                        //    job.UpdateVolume(Convert.ToDecimal(responseVolume[0].volume), 1);
                        DatabaseService.Enqueue(job);
                        DatabaseService.Enqueue(new UsdGeneratorJob(ExchangeId, bc.FromId, bc.ToId, bc.Price));
                    }
                }).Wait();
            }
        }
        private async Task OnPullingOrders(PullerSession session)
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();

                ParallelFor(prices, bc =>
                {
                    var key = bc.To + bc.From;
                    var responseOrders = Pull<HitbtcOrders>(string.Format(OrderUrl, key), session);
                    DatabaseService.Enqueue(new OrderUpdaterJob(bc.Id)
                        .UpdateBuy(responseOrders.bid.Take(10).ToList(), c => Convert.ToDecimal(c.price), c => Convert.ToDecimal(c.size))
                        .UpdateSell(responseOrders.ask.Take(10).ToList(), c => Convert.ToDecimal(c.price), c => Convert.ToDecimal(c.size)));
                }).Wait();
            }
        }
        

        private async Task OnPullingMarkets(PullerSession session)
        {
            var response = Pull<List<HitbtcMarket>>(MarketUrl, session);

            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                    .Where(bc => bc.BorsaId == ExchangeId)
                    .ToList();

                //get markets
                foreach (var market in response)
                {
                    var from = market.quoteCurrency;
                    var to = market.baseCurrency;

                    new MarketUpdaterJob(ExchangeId, from, to, true, prices).Execute(db);
                }
                new MarketUpdaterJob(prices).Execute(db);

                db.SaveChanges();
            }
        }

        private async Task OnPullingCurrencies(PullerSession session)
        {
            var response = Pull<List<HitbtcMarket>>(MarketUrl, session);

            var coinNames = response.SelectMany(p =>
                {
                    var from = p.quoteCurrency;
                    var to = p.baseCurrency;
                    return new List<string>() {from, to};
                }).Distinct()
                .ToList();

            foreach (var currency in coinNames)
                DatabaseService.Enqueue(new CurrencyUpdaterJob(
                    ExchangeId,
                    currency,
                    currency,
                    true,
                    null));
            
        }
    }
}
