using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;
using ZeegZag.Crawler2.Entity;
using ZeegZag.Crawler2.Services.Database;

namespace ZeegZag.Crawler2.Services.Bitfinex
{
    public class BitfinexService : ExchangeServiceBase
    {
        private const string MarketUrl = "https://api.bitfinex.com/v1/symbols";
        private const string PriceUrl = "https://api.bitfinex.com/v1/pubticker/{0}";
        private const string VolumeUrl = "https://api.bitfinex.com/v2/candles/trade:1m:t{0}/last";

        public override string Name { get; } = "Bitfinex";

        public override bool IsDisabled { get; } = false;

        /// <inheritdoc />
        public override void Init(zeegzagContext db)
        {
            GetExchangeId(db);
            RegisterRateLimit(3);

            CreatePuller(PULLER_CURRENCY, 60 * 60, 0, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, 45, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, 90, OnPullingPrices); //pull prices every minute
        }

        private async Task OnPullingPrices()
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();

                var tasks = new List<Task>(prices.Count);
                foreach (var bc in prices)
                {
                    tasks.Add(Task.Factory.StartNew(() =>
                    {
                        var symbol = bc.To + bc.From;

                        //var responseTicker = Pull<BitfinexTicker>(string.Format(PriceUrl, symbol)).Result;
                        var responseVolume = Pull<List<decimal>>(string.Format(VolumeUrl, symbol)).Result;

                        var mv = responseVolume[5];
                        var open = responseVolume[1];
                        var close = responseVolume[2];
                        var high = responseVolume[3];
                        var low = responseVolume[4];
                        //var dv = Convert.ToDecimal(responseTicker.volume);
                        var dbv = 0;

                        DatabaseService.Enqueue(new PriceUpdaterJob(bc.Id, close, mv, 1, 0, dbv)
                            //.UpdatePrice24Data(0, Convert.ToDecimal(responseTicker.high), Convert.ToDecimal(responseTicker.low), 0)
                            .UpdatePriceData(open, high, low, close));
                        DatabaseService.Enqueue(new UsdGeneratorJob(ExchangeId, bc.FromId, bc.ToId, bc.Price));
                    }));
                }
                Task.WaitAll(tasks.ToArray());
            }
        }

        private async Task OnPullingMarkets()
        {
            var response = Pull<List<string>>(MarketUrl).Result;

            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                    .Where(bc => bc.BorsaId == ExchangeId)
                    .ToList();

                //get markets
                foreach (var market in response)
                {
                    var from = market.Substring(3).ToUpper();
                    var to = market.Substring(0, 3).ToUpper();

                    new MarketUpdaterJob(ExchangeId, from, to, true, prices).Execute(db);
                }
                new MarketUpdaterJob(prices).Execute(db);

                db.SaveChanges();
            }
        }

        private async Task OnPullingCurrencies()
        {
            var response = Pull<List<string>>(MarketUrl).Result;

            //get coin names
            var coinNames = response.SelectMany(p =>
            {
                var from = p.Substring(3).ToUpper();
                var to = p.Substring(0,3).ToUpper();
                return new List<string>() { from, to };
            }).Where(c => !string.IsNullOrEmpty(c))
            .Distinct()
            .ToList();

            foreach (var coin in coinNames)
            {
                DatabaseService.Enqueue(new CurrencyUpdaterJob(
                    ExchangeId,
                    coin,
                    coin,
                    true,
                    null));
            }
        }
    }
}
