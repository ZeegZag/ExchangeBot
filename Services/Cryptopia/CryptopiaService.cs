using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;
using ZeegZag.Crawler2.Entity;
using ZeegZag.Crawler2.Services.Binance;
using ZeegZag.Crawler2.Services.Database;

namespace ZeegZag.Crawler2.Services.Cryptopia
{
    public class CryptopiaService : ExchangeServiceBase
    {
        private const string MarketUrl = "https://www.cryptopia.co.nz/api/GetMarkets";
        private const string PriceUrl = "https://www.cryptopia.co.nz/api/GetMarket/{0}_{1}/1";

        public override string Name { get; } = "Cryptopia";
        public override bool IsDisabled { get; } = true;

        /// <inheritdoc />
        public override void Init(zeegzagContext db)
        {
            GetExchangeId(db);
            RegisterRateLimit(12);

            CreatePuller(PULLER_CURRENCY, 60 * 60, 0, OnPullingCurrencies); //pull new currencies every 6 hours            
            CreatePuller(PULLER_MARKETS, 60 * 60, 45, OnPullingMarkets); //pull markets every hour            
            CreatePuller(PULLER_PRICE, 60, 90, OnPullingPrices); //pull prices every minute
        }

        private async Task OnPullingPrices()
        {
            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Where(bc => bc.BorsaId == ExchangeId && !bc.Disabled && bc.AutoGenerated != true)
                    .Select(bc => new
                    {
                        Id = bc.Id,
                        FromId = bc.FromCurrencyId,
                        From = bc.FromCurrencyName,
                        ToId = bc.ToCurrencyId,
                        To = bc.ToCurrencyName,
                        Price = bc.Price,
                    }).ToList();
                int i = 0;


                Parallel.ForEach(prices, bc =>
                {
                    
                    var response = Pull<CryptopiaResponse<CryptopiaMarket>>(string.Format(PriceUrl, bc.To, bc.From)).Result;

                    var mv = response.Data.Volume;

                    DatabaseService.Enqueue(new PriceUpdaterJob(bc.Id, response.Data.LastPrice, mv, 60));
                    DatabaseService.Enqueue(new UsdGeneratorJob(ExchangeId, bc.FromId, bc.ToId, bc.Price));
                });
            }
        }

        private async Task OnPullingMarkets()
        {
            var response = await Pull<CryptopiaResponse<List<CryptopiaMarket>>>(MarketUrl).ConfigureAwait(false);

            using (var db = DatabaseService.CreateContext())
            {
                //get all prices from db
                var prices = db.BorsaCurrencyT
                    .Include(bc => bc.FromCurrency).Include(bc => bc.ToCurrency)
                    .Where(bc => bc.BorsaId == ExchangeId)
                    .ToList();

                //get markets
                foreach (var market in response.Data)
                {
                    var fromTo = market.Label.Split('/');
                    var from = fromTo[1];
                    var to = fromTo[0];

                    new MarketUpdaterJob(ExchangeId, from, to, true, prices).Execute(db);
                }
                new MarketUpdaterJob(prices).Execute(db);

                db.SaveChanges();
            }
        }

        private async Task OnPullingCurrencies()
        {
            var response = await Pull<CryptopiaResponse<List<CryptopiaMarket>>>(MarketUrl).ConfigureAwait(false);

            //get coin names
            var coinNames = response.Data.SelectMany(p =>
                {
                    var fromTo = p.Label.Split('/');
                    var from = fromTo[1];
                    var to = fromTo[0];
                    return new List<string>() {from, to};
                }).Where(c => !string.IsNullOrEmpty(c))
                .Distinct()
                .ToList();

            foreach (var coin in coinNames)
            {
                DatabaseService.Enqueue(new CurrencyUpdaterJob(
                    ExchangeId,
                    coin,
                    coin,
                    true,
                    null));
            }
        }
    }
}
